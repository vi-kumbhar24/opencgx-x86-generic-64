diff --git a/include/tdep-mips/libunwind_i.h b/include/tdep-mips/libunwind_i.h
index 3fe40c0..ea95337 100644
--- a/include/tdep-mips/libunwind_i.h
+++ b/include/tdep-mips/libunwind_i.h
@@ -248,8 +248,21 @@ dwarf_get (struct dwarf_cursor *c, dwarf_loc_t loc, unw_word_t *val)
   else if (c->as->abi == UNW_MIPS_ABI_O32)
     return read_s32 (c, DWARF_GET_LOC (loc), val);
   else
+  /* As unw_word_t is defined as uint64_t for N32, the value as been
+     packaged into 8 bytes. Most significant 4 bytes holds the required
+     value */
+#if _MIPS_SIM == _ABIN32 && BYTE_ORDER != LITTLE_ENDIAN
+    {
+        int ret = (*c->as->acc.access_mem) (c->as, DWARF_GET_LOC (loc), 
+                                            val, 0, c->as_arg);
+        if(*val > 0x100000000LL)
+            *val = (*val >> 32) | (*val << 32);
+        return ret;
+    }
+#else
     return (*c->as->acc.access_mem) (c->as, DWARF_GET_LOC (loc), val,
                                      0, c->as_arg);
+#endif /* _MIPS_SIM == _ABIN32 && BYTE_ORDER != LITTLE_ENDIAN */    
 }
 
 static inline int
diff --git a/src/coredump/_UCD_create.c b/src/coredump/_UCD_create.c
index 62f6ee0..cab808f 100644
--- a/src/coredump/_UCD_create.c
+++ b/src/coredump/_UCD_create.c
@@ -199,7 +199,7 @@ _UCD_create(const char *filename)
           cur->p_align  = hdr32.p_align ;
           /* cur->backing_filename = NULL; - done by memset */
           cur->backing_fd = -1;
-          cur->backing_filesize = hdr32.p_memsz;
+          cur->backing_filesize = hdr32.p_filesz;
           i++;
           cur++;
         }
@@ -243,9 +243,63 @@ _UCD_create(const char *filename)
             note_hdr = (Elf32_Nhdr *)ui->note_phdr;
             while (NOTE_FITS (note_hdr, note_end))
               {
+#ifdef __mips__ &&  _MIPS_SIM == _ABIN32
+                /* Workaround to take care size mismatch of pr_sigpend and 
+                   pr_sigpend between struct elf_prstatus and core dump file. */
+                if (note_hdr->n_type == NT_PRSTATUS)
+                  {
+                    ui->threads[n_threads++] = NOTE_DATA (note_hdr);
+                    ui->threads[n_threads] = NOTE_DATA (note_hdr);
+                    struct elf_prstatus *ptr;
+                    ptr = malloc (sizeof(struct elf_prstatus));
+                    if (!ptr) {
+		      perror("malloc failed");
+		      goto malloc_fail_end;
+		    }
+
+                    /* Get the offset/size of pr_sigpend in 
+		       struct elf_prstatus */
+                    int size_before_pr_sigpend;
+		    size_before_pr_sigpend = (char *)
+		                           &(ui->threads[n_threads]->pr_sigpend)
+		                           - (char *) (ui->threads[n_threads]);
+		    
+		    /* Copy contents of struct elf_prstatus before the 
+		       pr_sigpend member */
+                    memcpy(ptr, ui->threads[n_threads],size_before_pr_sigpend);
+
+		    /* Convert 4 bytes pr_sigpend and pr_sighold to 8 bytes */
+                    ptr->pr_sigpend = (ui->threads[n_threads]->pr_sigpend & 
+		                       0xffffffff00000000) >> 32;
+                    ptr->pr_sighold = ui->threads[n_threads]->pr_sigpend & 
+		                      0x00000000ffffffff;
+
+		    /* Get the offset/size of remaining members of struct 
+		       elf_prstatus after pr_sighold */
+                    int size_after_pr_sighold;
+		    size_after_pr_sighold = (char *) ui->threads[n_threads] +
+		                          sizeof(struct elf_prstatus) - (char *)
+		          		&(ui->threads[n_threads]->pr_pid);
+
+                    /* Copy contents of struct elf_prstatus after the 
+		       pr_sighold member */
+                    memcpy(&(ptr->pr_pid), ((char *) (ui->threads[n_threads]) + 
+		           size_before_pr_sigpend + 
+		           sizeof(ui->threads[n_threads]->pr_sigpend)), 
+		           size_after_pr_sighold);
+
+		    /* Save the modified contents back */
+                    memcpy (ui->threads[n_threads], ptr, 
+			    sizeof(struct elf_prstatus)); 
+		    /* Free up memory */
+                    free (ptr);
+malloc_fail_end:		  
+                    n_threads++;
+	          }	  
+#else                 
                 if (note_hdr->n_type == NT_PRSTATUS)
                   ui->threads[n_threads++] = NOTE_DATA (note_hdr);
-
+#endif /* __mips__ && _MIPS_SIM == _ABIN32 */
                 note_hdr = NOTE_NEXT (note_hdr);
               }
           }
diff --git a/src/mips/Gcreate_addr_space.c b/src/mips/Gcreate_addr_space.c
index 493d03d..2c921bd 100644
--- a/src/mips/Gcreate_addr_space.c
+++ b/src/mips/Gcreate_addr_space.c
@@ -58,8 +58,15 @@ unw_create_addr_space (unw_accessors_t *a, int byte_order)
     as->big_endian = (byte_order == __BIG_ENDIAN);
 
   /* FIXME!  There is no way to specify the ABI.  */
+#if _MIPS_SIM == _ABI64        
+  as->abi = UNW_MIPS_ABI_N64;                             
+#elif _MIPS_SIM == _ABIO32
   as->abi = UNW_MIPS_ABI_O32;
-  as->addr_size = 4;
+#elif _MIPS_SIM == _ABIN32                                
+  as->abi = UNW_MIPS_ABI_N32;  
+#endif /* _MIPS_SIM == _ABI64 */                          
+           
+  as->addr_size = sizeof (void *);  
 
   return as;
 #endif
diff --git a/src/mips/Gget_proc_info.c b/src/mips/Gget_proc_info.c
index 7b84be8..88bc80e 100644
--- a/src/mips/Gget_proc_info.c
+++ b/src/mips/Gget_proc_info.c
@@ -34,7 +34,15 @@ unw_get_proc_info (unw_cursor_t *cursor, unw_proc_info_t *pi)
      if it's not present.  */
   ret = dwarf_make_proc_info (&c->dwarf);
   if (ret < 0)
-    return ret;
+    {
+      /* On MIPS, it's relatively common to be missing DWARF unwind
+         info.  We don't want to fail in that case, because the
+         frame-chain still would let us do a backtrace at least.  */
+      memset (pi, 0, sizeof (*pi));
+      pi->start_ip = c->dwarf.ip;
+      pi->end_ip = c->dwarf.ip + 1;
+      return 0;
+    }
 
   *pi = c->dwarf.pi;
   return 0;
