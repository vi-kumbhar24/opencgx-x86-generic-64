#
# This file contains a few gdb macros (user defined commands) to extract
# useful information from kernel crashdump (kdump) like stack traces of
# all the processes or a particular process and trapinfo.
#
# Code based on kernel: Documentation/kdump/gdbmacros.txt


define dmesg
	set $idx = log_first_idx
	while $idx != log_next_idx
		set $entry = (struct log *)(log_buf + $idx)
		if $entry->len == 0
			set $idx = 0
			loop_continue
		end
		set $usecs = $entry->ts_nsec / 1000
		printf "[%05lu.%06lu] ", $usecs / 1000000, $usecs % 1000000
		set $msg = (char *)($entry + 1)
		set $i = 0
		while $i < $entry->text_len
			printf "%c", *($msg + $i)
			set $i = $i + 1
		end
		printf "\n"
		set $idx += $entry->len
	end
end

document dmesg
	print the kernel log buffer
end

define ps
	set $tasks_off=((size_t)&((struct task_struct *)0)->tasks)
	set $pid_off=((size_t)&((struct task_struct *)0)->pids[1].node.next)
	set $init_t=  (struct task_struct *)&init_task
	set $next_t=  (struct task_struct *)(((char *)($init_t->tasks).next) - $tasks_off)
	printf  "PID\t tty\t CMD\n"	
	while ($next_t != $init_t)
		set $signal = (struct signal_struct *)($next_t->signal)
		set $tty = (struct tty_struct *)($signal->tty)
		if ($tty)
			set $tty_name = ($tty.name)
			printf "%d\t %s\t %s\n", $next_t.pid, $tty_name, $next_t.comm
		else
			printf "%d\t ?\t  %s\n", $next_t.pid, $next_t.comm
		end
		set $next_t=  (struct task_struct *)((char *)($next_t->tasks.next) - $tasks_off)
	end	
end 
document ps 
	print processes 
end

define btpid
	set var $pid = $arg0
	set $tasks_off=((size_t)&((struct task_struct *)0)->tasks)
	set $pid_off=((size_t)&((struct task_struct *)0)->pids[1].node.next)
	set $init_t=(struct task_struct *)&init_task
	set $next_t=(struct task_struct *)(((char *)($init_t->tasks).next) - $tasks_off)
	set var $pid_task = 0
	while ($next_t != $init_t)
		set $next_t=(struct task_struct *)$next_t
		if ($next_t.pid == $pid)
			set $pid_task = $next_t
		end
		set $next_t=(struct task_struct *)((char *)($next_t->tasks.next) - $tasks_off)
	end

	printf "\npid %d; comm %s:\n", $pid_task.pid, $pid_task.comm
	printf "===================\n"
	set var $stackp = $pid_task.thread.sp
	set var $stack_top = ($stackp & ~4095) + 4096
	set var $stack_bot = ($stackp & ~4095)

	set $stackp = *(ulong*)($stackp)

	while (($stackp < $stack_top) && ($stackp > $stack_bot))
		set var $addr = *(ulong *)((ulong*)$stackp + 1)
		info symbol $addr
		set $stackp = *(ulong *)($stackp)
	end
end
document btpid
	backtrace of pid
end

define kvtop 
	set $PAGEDIR_SHIFT = 20
	set $PAGEOFFSET = 0xfff
	set $PTRS_PER_PTE = 0x400

	set $addr = (ulong)$arg0
	set $pgd_off = (ulong)$addr >> $PAGEDIR_SHIFT
	set $page_dir = (ulong) &swapper_pg_dir + (ulong)$pgd_off
	set $page_mid = (ulong)*$page_dir 
	set $page = (ulong)($page_mid & 0xfffff000) + (ulong)(($addr >> 10 ) & (( $PTRS_PER_PTE - 1) << 2)) 
	set $pte = (*((ulong)$page + (ulong)0xc0000000)  & (ulong)0xfffff000) +  ($addr & (ulong)0xfff)
	#printf "virt 0x%lx --> phys 0x%lx\n",  $addr, $pte + (ulong)0xc0000000
	set $ret = $pte + (ulong)0xc0000000
end


