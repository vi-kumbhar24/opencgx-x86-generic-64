diff -Naurp evlog-1.6.1/user/cmd/evlactiond/evlactiond.c evlog-1.6.1_mod/user/cmd/evlactiond/evlactiond.c
--- evlog-1.6.1/user/cmd/evlactiond/evlactiond.c	2009-10-13 09:25:32.000000000 -0700
+++ evlog-1.6.1_mod/user/cmd/evlactiond/evlactiond.c	2009-10-12 15:41:42.000000000 -0700
@@ -42,6 +42,7 @@
 #include <grp.h>
 #include <pwd.h>
 #include <sys/wait.h>
+#include <syslog.h>
 
 #include "config.h"
 #include "posix_evlog.h"
@@ -134,6 +135,25 @@ static char *PidFile = "/var/run/evlacti
 
 static char *logPath = LOG_CURLOG_PATH;
 
+static int log_syslog = 0;
+
+static void error_log(int level, char *format, ...)
+{
+	char buffer[256];
+	va_list args;
+	
+	va_start(args, format);
+	vsnprintf(buffer, 255, format, args);
+
+
+	if (log_syslog)
+		syslog(level, buffer);
+	else
+		fprintf(stderr, buffer);
+
+	va_end(args);
+}
+
 int 
 main(int argc, char *argv[]) 
 {
@@ -160,11 +180,14 @@ main(int argc, char *argv[]) 
 	pid_t pid;
 	
 
-	while((c=getopt(argc, argv, "f")) != EOF) {
+	while((c=getopt(argc, argv, "fs")) != EOF) {
 		switch (c) {
 			case 'f':
 				daemonize = 0;
 			break;     
+			case 's':
+				log_syslog = 1;
+			break;     
 			default:     
 			break;
 		}
@@ -178,6 +201,11 @@ main(int argc, char *argv[]) 
 	for (i = 0; i < MAX_CLIENTS; i++) {
 		clients[i].sd = CLIENT_SLOT_AVAILABLE;
 	}
+
+	/* record unexpected events to allow op to take action */
+	if (log_syslog)
+		openlog("evlactiond",LOG_PID, LOG_DAEMON);
+
 	/* Reuse template once it is created */
 	evltemplate_initmgr(TMPL_REUSE1CLONE);
 
@@ -190,7 +218,8 @@ main(int argc, char *argv[]) 
    	/* read the action registry file */
 	TRACE("Loading action registry.. \n");
    	if (loadActionsFromFile() != 0) {
-   		fprintf(stderr, "Failed to load action registry.\n");
+		error_log(LOG_EMERG, "%s: evlactiond: Failed to load action registry\n", argv[0]);
+		exit(1);
    	}
 
 	/* install signal handlers */
@@ -200,43 +229,24 @@ main(int argc, char *argv[]) 
 	SigTERMAction.sa_flags = 0;
 
 	if (sigaction(SIGTERM, &SigTERMAction, NULL) < 0){
-		(void)fprintf(stderr, "%s: sigaction failed for new SIGTERM.\n", argv[0]);
-		perror("sigaction");
+		error_log(LOG_ERR, "%s: sigaction failed for new SIGTERM\n", argv[0]);
+ 		perror("sigaction");
 	}
 	if (sigaction(SIGHUP, &SigTERMAction, NULL) < 0){
-		(void)fprintf(stderr, "%s: sigaction failed for new SIGHUP.\n", argv[0]);
+		error_log(LOG_ERR, "%s: sigaction failed for new SIGHUP\n", argv[0]);
 		perror("sigaction");
 	}
 	if (sigaction(SIGINT, &SigTERMAction, NULL) < 0){
-		(void)fprintf(stderr, "%s: sigaction failed for new SIGINT.\n", argv[0]);
-		perror("sigaction");
-	}
-/*
- * sigChild_handler can't handle a high rate of death childs, that leaves zombie
- * processes around -  if 0 the code below
- *
- * Just ignore SIGCHLD would fix this problem
- */
-#if 0
-	/*
-	 * Create signal handler to handle SIGCHILD - 
-	 */
-	(void)memset(&SigChild, 0, sizeof(struct sigaction));
-	SigChild.sa_handler =sigChild_handler;
-	SigChild.sa_flags = 0;
-	if (sigaction(SIGCHLD, &SigChild, NULL) < 0){
-		(void)fprintf(stderr, "%s: sigaction failed for new SIGCHLD.\n", argv[0]);
+		error_log(LOG_ERR, "%s: sigaction failed for new SIGINT.\n");
 		perror("sigaction");
-		exit(1); 
 	}
-#endif
     /* Ignore SIGCHLD */	
 	(void) memset(&act, 0, sizeof(act));
 	act.sa_handler = SIG_IGN;
 	act.sa_flags = 0;
 
 	if (sigaction(SIGCHLD, &act, NULL) < 0){
-		(void)fprintf(stderr, "%s: sigaction failed for new SIGCHLD.\n", argv[0]);
+		error_log(LOG_ERR, "%s: sigaction failed for new SIGCHLD.\n", argv[0]);
 		perror("sigaction");
 		exit(1);
 	}
@@ -246,7 +256,7 @@ main(int argc, char *argv[]) 
 	 * the server may go away, we want to reconnect to the server if possible.
 	 */
 	if (sigaction(SIGPIPE, &act, NULL) < 0){
-		(void)fprintf(stderr, "%s: sigaction failed for new SIGPIPE.\n", argv[0]);
+		error_log(LOG_ERR, "%s: sigaction failed for new SIGPIPE.\n", argv[0]);
 		perror("sigaction");
 		exit(1);
 	}
@@ -262,7 +272,7 @@ main(int argc, char *argv[]) 
 												 * to the signal handler
 												 */
 	if (sigaction(SIGRTMIN+1, &SigRTAction, NULL) < 0){
-		(void)fprintf(stderr, "%s: sigaction failed for new SIGRTMIN.\n", argv[0]);
+		error_log(LOG_ERR, "%s: sigaction failed for new SIGRTMIN.\n", argv[0]);
 		perror("sigaction");
 	}
 
@@ -438,7 +448,7 @@ main(int argc, char *argv[]) 
  	int num_fds, i;
 
 	if (_evlValidate_pid(PidFile)) {
-		fprintf(stderr, "evlactiond: Already running.\n");
+			error_log(LOG_EMERG, "evlactiond: Already running.\n");
 		exit(1);
 	}
 	/*
@@ -446,8 +456,7 @@ main(int argc, char *argv[]) 
 	 * the first child is not a process group leader.
 	 */
 	if ((pid = fork()) < 0) {
-		fprintf(stderr, 
-				"evlactiond: Cannot fork child process. Check system process usage.\n"); 
+		error_log(LOG_EMERG, "evlactiond: Cannot fork child process. Check system process usage.\n"); 
 		exit(1);
 	} else if (pid > 0) {
 		exit (0);
@@ -470,8 +479,7 @@ main(int argc, char *argv[]) 
 
 	
 	if ((pid = fork()) < 0) {
-		fprintf(stderr,
-				"evlactiond: Cannot fork child process. Check system process usage.\n"); 
+		error_log(LOG_EMERG, "evlactiond: Cannot fork child process. Check system process usage.\n"); 
 		exit(1);
 	} else if (pid > 0) {
 		exit(0);
@@ -483,10 +491,8 @@ main(int argc, char *argv[]) 
 	 * 
 	 */ 
 	if (!_evlUpdate_pid(PidFile)) {
-#if 0
-		LOGERROR(EVLOG_WRITE_PID, "evlactiond: Cannot write 'evlactiond' PID to '%s' file\n", 
+		error_log(LOG_EMERG, "evlactiond: Cannot write 'evlactiond' PID to '%s' file\n", 
 				PidFile);
-#endif
 		exit(1);
 	}
 	/*  Redirect fd 0 1 2 to /dev/null */
@@ -1252,7 +1258,7 @@ checkAllowDenyAccess(uid_t uid) 
 #if 0
 		LOGERROR(EVLOG_PWFILE_LOOKUP_FAILED, "Failed to look up the user name");
 #endif
-    	fprintf(stderr, "Failed to look up the user name\n");
+	error_log(LOG_ERR, "evlactiond: Failed user name lookup");
     	return -1;
     }
 	/*
@@ -1466,14 +1472,17 @@ execute(nfy_action_t * action, size_t re
 #if 0
 			LOGERROR(EVLOG_GID_OP_FAILED, "evlactiond: setegid failed errno=%d", errno);
 #endif
-			fprintf(stderr, "Failed to change group ID to %d.\n", action->hdr.gid);
+			error_log(LOG_ERR, "evlactiond: Failed to change group ID to %d\n", action->hdr.gid);
 		}
 		
 		pw = getpwuid(action->hdr.uid);
 		if (pw == NULL) {
+			error_log(LOG_EMERG, "evlactiond: getpwuid failed\n");
+			perror("getpwuid");
 			_exit(1);
 		}
 		if (initgroups(pw->pw_name, action->hdr.gid) == -1) {
+			error_log(LOG_EMERG, "evlactiond: initgroups failed\n");
 			perror("initgroups");
 			_exit(1);
 		}
@@ -1482,7 +1491,7 @@ execute(nfy_action_t * action, size_t re
 #if 0
 			LOGERROR(EVLOG_UID_OP_FAILED, "evlactiond: seteuid failed errno=%d", errno);
 #endif
-			fprintf(stderr, "Failed to change user ID to %d.\n", action->hdr.uid);
+			error_log(LOG_EMERG, "evlactiond: Failed to change user ID to %d\n", action->hdr.uid);
 			_exit(1);
 		}
 			
@@ -1497,6 +1506,7 @@ execute(nfy_action_t * action, size_t re
 		
 		execl("/bin/sh", "sh", "-c", exeCmd, 0);
 		/* It should never get here if execl goes well */
+		error_log(LOG_EMERG, "evlactiond: execl failed\n");
 		perror("execl");
 		_exit(127);
 	} else {
