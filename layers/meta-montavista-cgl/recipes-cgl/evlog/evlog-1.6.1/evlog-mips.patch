Index: evlog-1.6.1/user/cmd/evlogd/evlogd.c
===================================================================
--- evlog-1.6.1.orig/user/cmd/evlogd/evlogd.c
+++ evlog-1.6.1/user/cmd/evlogd/evlogd.c
@@ -100,6 +100,22 @@ _syscall3(int,ksyslog,int, type, char *,
 #elif defined(__arm__) && !defined(__ARMEB__)
 #define LOG_MAGIC_ARCH  ((LOGREC_MAGIC & 0xffff0000) | LOGREC_ARCH_ARM_LE)
 #define LOCAL_ARCH 	LOGREC_ARCH_ARM_LE
+#elif defined(__mips__)
+# if _MIPS_SZLONG==64 && defined(MIPSEB)
+#define LOG_MAGIC_ARCH  ((LOGREC_MAGIC & 0xffff0000) | LOGREC_ARCH_MIPS64_BE)
+#define LOCAL_ARCH 	LOGREC_ARCH_MIPS64_BE
+# elif _MIPS_SZLONG==64 && defined (MIPSEL)
+#define LOG_MAGIC_ARCH  ((LOGREC_MAGIC & 0xffff0000) | LOGREC_ARCH_MIPS64_LE)
+#define LOCAL_ARCH 	LOGREC_ARCH_MIPS64_LE
+# elif defined(MIPSEB)
+#define LOG_MAGIC_ARCH  ((LOGREC_MAGIC & 0xffff0000) | LOGREC_ARCH_MIPS_BE)
+#define LOCAL_ARCH 	LOGREC_ARCH_MIPS_BE
+# elif defined (MIPSEL)
+#define LOG_MAGIC_ARCH  ((LOGREC_MAGIC & 0xffff0000) | LOGREC_ARCH_MIPS_LE)
+#define LOCAL_ARCH 	LOGREC_ARCH_MIPS_LE
+# else
+#error "MIPS needs MIPSEB or MIPSEL defined"
+# endif
 #else
 #define	LOG_MAGIC_ARCH  ((LOGREC_MAGIC & 0xffff0000) | LOGREC_NO_ARCH)
 #define LOCAL_ARCH 	LOGREC_NO_ARCH
Index: evlog-1.6.1/user/include/evlog.h.in
===================================================================
--- evlog-1.6.1.orig/user/include/evlog.h.in
+++ evlog-1.6.1/user/include/evlog.h.in
@@ -118,6 +118,12 @@ typedef int evlrecsize_t;
 #define LOGREC_ARCH_X86_64			0x0007
 #define LOGREC_ARCH_ARM_BE			0x0008
 #define LOGREC_ARCH_ARM_LE			0x0009
+#define LOGREC_ARCH_MIPS_BE			0x000a
+#define LOGREC_ARCH_MIPS_LE			0x000b
+#define LOGREC_ARCH_MIPS64_BE			0x000c
+#define LOGREC_ARCH_MIPS64_LE			0x000d
+
+#define LOGREC_NUM_ARCHES			14
 
 /*
  * Logfile Header structure.
Index: evlog-1.6.1/user/lib/posix1.c
===================================================================
--- evlog-1.6.1.orig/user/lib/posix1.c
+++ evlog-1.6.1/user/lib/posix1.c
@@ -256,6 +256,16 @@ _EvlLogWrite(	posix_log_facility_t	facil
 	entry.log_magic = LOGREC_ARCH_ARM_BE;
 #elif defined(__arm__) && !defined(__ARMEB__)
 	entry.log_magic = LOGREC_ARCH_ARM_LE;
+#elif defined(__mips__)
+# if _MIPS_SZLONG==64 && defined(MIPSEB)
+	entry.log_magic = LOGREC_ARCH_MIPS64_BE;
+# elif _MIPS_SZLONG==64 && defined(MIPSEL)
+	entry.log_magic = LOGREC_ARCH_MIPS64_LE;
+# elif defined(MIPSEB)
+	entry.log_magic = LOGREC_ARCH_MIPS_BE;
+# elif defined(MIPSEL)
+	entry.log_magic = LOGREC_ARCH_MIPS_LE;
+#endif
 #else
 	entry.log_magic = LOGREC_ARCH_NO_ARCH;
 #endif
Index: evlog-1.6.1/user/lib/template/convert.c
===================================================================
--- evlog-1.6.1.orig/user/lib/template/convert.c
+++ evlog-1.6.1/user/lib/template/convert.c
@@ -67,7 +67,6 @@ typedef enum conv_{
 	BE_64_32
 } conv_t;
 
-extern tmpl_arch_type_info_t _evlTmplArchTypeInfo[8][24];
 /*
  * The first element of _evlTmplArchTypeInfo[0]... is always compiled
  * with local architecture, so it should contains local architecture
@@ -94,6 +93,16 @@ extern tmpl_arch_type_info_t _evlTmplArc
 	#define LOCAL_ARCH		LOGREC_ARCH_ARM_BE
 #elif defined(__arm__) && !defined(__ARMEB__)
 	#define LOCAL_ARCH		LOGREC_ARCH_ARM_LE
+#elif defined(__mips__)
+# if _MIPS_SZLONG==64 && defined(MIPSEB)
+	#define LOCAL_ARCH		LOGREC_ARCH_MIPS64_BE
+# elif _MIPS_SZLONG==64 && defined(MIPSEL)
+	#define LOCAL_ARCH		LOGREC_ARCH_MIPS64_LE
+# elif defined(MIPSEB)
+	#define LOCAL_ARCH		LOGREC_ARCH_MIPS_BE
+# elif defined(MIPSEL)
+	#define LOCAL_ARCH		LOGREC_ARCH_MIPS_LE
+# endif
 #endif
 
 /* 
@@ -101,18 +110,22 @@ extern tmpl_arch_type_info_t _evlTmplArc
  * The 1st subscript represents the log record archicture (remote event)
  * The 2nd subscript represents the local architecture (local host) 
  */
-conv_t conv_info[][10] = {
-	   /*   I386      IA64      S390      S390X     PPC       PPC64	    X86_64    ARM_BE    ARM_LE  */
-/* NOARCH*/{ 0, 0,        0,        0,        0,        0,        0,        0,	      0,        0 },
-/* I386  */{ 0, NO_CONV,  LE_32_64, BS_32_32, BS_32_64, BS_32_32, BS_32_64, LE_32_64, BS_32_32, NO_CONV },
-/* IA64  */{ 0, LE_64_32, NO_CONV,  BS_64_32, BS_64_64, BS_64_32, BS_64_64, NO_CONV,  BS_64_32, LE_64_32 },
-/* S390  */{ 0, BS_32_32, BS_32_64, NO_CONV,  BE_32_64, NO_CONV,  BE_32_64, BS_32_64, NO_CONV,  BS_32_32 },
-/* S390X */{ 0, BS_64_32, BS_64_64, BE_64_32, NO_CONV,  BE_64_32, NO_CONV,  BS_64_64, BE_64_32, BS_64_32 },
-/* PPC   */{ 0, BS_32_32, BS_32_64, NO_CONV,  BE_32_64, NO_CONV,  BE_32_64, BS_32_64, NO_CONV,  BS_32_32 },
-/* PPC64 */{ 0, BS_64_32, BS_64_64, BE_64_32, NO_CONV,  BE_64_32, NO_CONV,  BS_64_64, BE_64_32, BS_64_32 },
-/* X86_64*/{ 0, LE_64_32, NO_CONV,  BS_64_32, BS_64_64, BS_64_32, BS_64_64, NO_CONV,  BS_64_32, LE_64_32 },
-/* ARM_BE*/{ 0, BS_32_32, BS_32_64, NO_CONV,  BE_32_64, NO_CONV,  BE_32_64, BS_32_64, NO_CONV,  BS_32_32 },
-/* ARM_LE*/{ 0, NO_CONV,  LE_32_64, BS_32_32, BS_32_64, BS_32_32, BS_32_64, LE_32_64, BS_32_32, NO_CONV },
+conv_t conv_info[LOGREC_NUM_ARCHES][LOGREC_NUM_ARCHES] = {
+/*                  I386      IA64      S390      S390X     PPC       PPC64     X86_64    ARM_BE    ARM_LE    MIPS64_BE MIPS64_LE MIPS_BE   MIPS_LE  **/
+/* NOARCH*/    { 0, 0,        0,        0,        0,        0,        0,        0,	  0,        0,        0,        0,        0,        0},
+/* I386  */    { 0, NO_CONV,  LE_32_64, BS_32_32, BS_32_64, BS_32_32, BS_32_64, LE_32_64, BS_32_32, NO_CONV,  BS_32_64, LE_32_64, BS_32_32, NO_CONV },
+/* IA64  */    { 0, LE_64_32, NO_CONV,  BS_64_32, BS_64_64, BS_64_32, BS_64_64, NO_CONV,  BS_64_32, LE_64_32, BS_64_64, NO_CONV,  BS_64_32, LE_64_32 },
+/* S390  */    { 0, BS_32_32, BS_32_64, NO_CONV,  BE_32_64, NO_CONV,  BE_32_64, BS_32_64, NO_CONV,  BS_32_32, BE_32_64, BS_32_64, NO_CONV,  BS_32_32 },
+/* S390X */    { 0, BS_64_32, BS_64_64, BE_64_32, NO_CONV,  BE_64_32, NO_CONV,  BS_64_64, BE_64_32, BS_64_32, NO_CONV,  BS_64_64, BE_64_32, BS_64_32 },
+/* PPC   */    { 0, BS_32_32, BS_32_64, NO_CONV,  BE_32_64, NO_CONV,  BE_32_64, BS_32_64, NO_CONV,  BS_32_32, BE_32_64, BS_32_64, NO_CONV,  BS_32_32 },
+/* PPC64 */    { 0, BS_64_32, BS_64_64, BE_64_32, NO_CONV,  BE_64_32, NO_CONV,  BS_64_64, BE_64_32, BS_64_32, NO_CONV,  BS_64_64, BE_64_32, BS_64_32 },
+/* X86_64*/    { 0, LE_64_32, NO_CONV,  BS_64_32, BS_64_64, BS_64_32, BS_64_64, NO_CONV,  BS_64_32, LE_64_32, BS_64_64, NO_CONV,  BS_64_32, LE_64_32 },
+/* ARM_BE*/    { 0, BS_32_32, BS_32_64, NO_CONV,  BE_32_64, NO_CONV,  BE_32_64, BS_32_64, NO_CONV,  BS_32_32, BE_32_64, BS_32_64, NO_CONV,  BS_32_32 },
+/* ARM_LE*/    { 0, NO_CONV,  LE_32_64, BS_32_32, BS_32_64, BS_32_32, BS_32_64, LE_32_64, BS_32_32, NO_CONV,  BS_32_64, LE_32_64, BS_32_32, NO_CONV },
+/* MIPS64_BE*/ { 0, BS_64_32, BS_64_64, BE_64_32, NO_CONV,  BE_64_32, NO_CONV,  BS_64_64, BE_64_32, BS_64_32, NO_CONV,  BS_64_64, BE_64_32, BS_64_32 },
+/* MIPS64_LE*/ { 0, LE_64_32, NO_CONV,  BS_64_32, BS_64_64, BS_64_32, BS_64_64, NO_CONV,  BS_64_32, LE_64_32, BS_64_64, NO_CONV,  BS_64_32, LE_64_32 },
+/* MIPS_BE*/   { 0, BS_32_32, BS_32_64, NO_CONV,  BE_32_64, NO_CONV,  BE_32_64, BS_32_64, NO_CONV,  BS_32_32, BE_32_64, BS_32_64, NO_CONV,  BS_32_32 },
+/* MIPS_LE*/   { 0, NO_CONV,  LE_32_64, BS_32_32, BS_32_64, BS_32_32, BS_32_64, LE_32_64, BS_32_32, NO_CONV,  BS_32_64, LE_32_64, BS_32_32, NO_CONV }
 };
 
 static void
Index: evlog-1.6.1/user/lib/template/template.c
===================================================================
--- evlog-1.6.1.orig/user/lib/template/template.c
+++ evlog-1.6.1/user/lib/template/template.c
@@ -108,7 +108,7 @@ tmpl_type_info_t _evlTmplTypeInfo[] = {
  * Todo : Make sure to find out exactly LLALIGN ULLALIGN DALIGN LDALIGN
  * for each platform - and replace them in the _evlTmplArchTypeInfo array
  */ 
-tmpl_arch_type_info_t _evlTmplArchTypeInfo[10][24] = {
+tmpl_arch_type_info_t _evlTmplArchTypeInfo[LOGREC_NUM_ARCHES][TY_NUM_TYPES] = {
 /* the first subcript is for architecture */
 /* LOGREC_NO_ARCH */
 	{
@@ -380,6 +380,114 @@ tmpl_arch_type_info_t _evlTmplArchTypeIn
 	{0, 0},/*TY_STRUCTNAME*/
 	{0, 0},	/*TY_TYPEDEF*/
 	{0, 0}	/* the end */
+	},
+/* LOGREC_ARCH_MIPS_BE */
+	{
+	{0, 0},
+	{1,	1},
+	{1, 1},
+	{2, 2},
+	{2, 2},
+	{4, 4},
+	{4, 4},
+	{4, 4},
+	{4, 4},
+	{8,	8},
+	{8, 8},
+	{4, 4},
+	{8,	8},
+	{16, 16},
+	{4, 0},
+	{4, 4},
+	{4, 0},
+	{4, 4},
+	{0, 0},
+	{0, 0},
+	{0, 0},
+	{0, 0},/*TY_STRUCTNAME*/
+	{0, 0},	/*TY_TYPEDEF*/
+	{0, 0}	/* the end */
+	},
+/* LOGREC_ARCH_MIPS_LE */
+	{
+	{0, 0},
+	{1,	1},
+	{1, 1},
+	{2, 2},
+	{2, 2},
+	{4, 4},
+	{4, 4},
+	{4, 4},
+	{4, 4},
+	{8,	8},
+	{8, 8},
+	{4, 4},
+	{8,	8},
+	{16, 16},
+	{4, 0},
+	{4, 4},
+	{4, 0},
+	{4, 4},
+	{0, 0},
+	{0, 0},
+	{0, 0},
+	{0, 0},/*TY_STRUCTNAME*/
+	{0, 0},	/*TY_TYPEDEF*/
+	{0, 0}	/* the end */
+	},
+/* LOGREC_ARCH_MIPS64_BE */
+	{
+	{0, 0},
+	{1,	1},
+	{1, 1},
+	{2, 2},
+	{2, 2},
+	{4, 4},
+	{4, 4},
+	{8, 8},
+	{8, 8},
+	{8,	8},
+	{8, 8},
+	{4, 4},
+	{8,	8},
+	{16, 16},
+	{8, 0},
+	{4, 4},
+	{8, 0},
+	{8, 8},
+	{0, 0},
+	{0, 0},
+	{0, 0},
+	{0, 0},/*TY_STRUCTNAME*/
+	{0, 0},	/*TY_TYPEDEF*/
+	{0, 0}	/* the end */
+	},
+/* LOGREC_ARCH_MIPS64_LE */
+	{
+	{0, 0},
+	{1,	1},
+	{1, 1},
+	{2, 2},
+	{2, 2},
+	{4, 4},
+	{4, 4},
+	{8, 8},
+	{8, 8},
+	{8,	8},
+	{8, 8},
+	{4, 4},
+	{8,	8},
+	{16, 16},
+	{8, 0},
+	{4, 4},
+	{8, 0},
+	{8, 8},
+	{0, 0},
+	{0, 0},
+	{0, 0},
+	{0, 0},/*TY_STRUCTNAME*/
+	{0, 0},	/*TY_TYPEDEF*/
+	{0, 0}	/* the end */
 	}
 };
 
Index: evlog-1.6.1/user/include/evl_template.h
===================================================================
--- evlog-1.6.1.orig/user/include/evl_template.h
+++ evlog-1.6.1/user/include/evl_template.h
@@ -34,6 +34,7 @@
 #include "posix_evlog.h"
 #include "posix_evlsup.h"
 #include "evl_list.h"
+#include "evlog.h"
 
 /*
  * A template contains the following sections:
@@ -93,7 +94,9 @@ typedef enum tmpl_base_type {
 	TY_LIST,	/*for arrays of structs, and when parsing initializers*/
 	TY_STRUCTNAME,		/* converted to TY_STRUCT after lookup */
 	TY_TYPEDEF,		/* type name better be a typedef name */
-	TY_SPECIAL		/* catch-all for special cases */
+	TY_SPECIAL,		/* catch-all for special cases */
+
+	TY_NUM_TYPES	/* MUST BE LAST */
 } tmpl_base_type_t;
 
 /*
@@ -469,7 +472,7 @@ extern int evlatt_getstructfromarray(con
 extern void _evlTmplSemanticError(const char *fmt, ...);
 extern tmpl_type_info_t _evlTmplTypeInfo[];
 
-extern tmpl_arch_type_info_t _evlTmplArchTypeInfo[][24];
+extern tmpl_arch_type_info_t _evlTmplArchTypeInfo[LOGREC_NUM_ARCHES][TY_NUM_TYPES];
 
 extern void _evlTmplDprintf(const char *fmt, ...);
 extern int _evlEndsWith(const char *s, const char *suffix);
Index: evlog-1.6.1/user/lib/template/tmplfmt.c
===================================================================
--- evlog-1.6.1.orig/user/lib/template/tmplfmt.c
+++ evlog-1.6.1/user/lib/template/tmplfmt.c
@@ -40,8 +40,6 @@
 
 #define dprintf _evlTmplDprintf
 
-extern tmpl_arch_type_info_t _evlTmplArchTypeInfo[7][24];
-
 static int formatRecordFromTemplate(const template_t *template, evl_fmt_buf_t *f);
 
 enum myIZorder {S, SI, IS, Z, ZI, IZ};
Index: evlog-1.6.1/user/lib/test/defaultTest.mips.out
===================================================================
--- /dev/null
+++ evlog-1.6.1/user/lib/test/defaultTest.mips.out
@@ -0,0 +1,20 @@
+event type 1001:
+defaultTest.c:: This event record has a message string, but no further data.
+
+event type 1002:
+defaultTest.c:: This event record has a message string plus 3 ints.
+00000000 00 00 00 0B 00 00 00 15  00 00 07 CE
+event type 1003:
+Hey!  Something happened at line xx of defaultTest.c:
+Basically the same data as for event type 1002,
+but formatted with a non-default template.
+11/21/1998
+event type 1004:
+defaultTest.c:: This event record has a message string, plus another string.
+00000000 54 68 69 73 20 69 73 20  74 68 65 20 6F 74 68 65
+00000010 72 20 73 74 72 69 6E 67  2E 00
+event type 1003:
+Hey!  Something happened at line xx of defaultTest.c:
+This is another instance of event type 1003,
+with a different message and different ints.
+9/30/2000
Index: evlog-1.6.1/user/lib/test/evl_log_write.mips.out
===================================================================
--- /dev/null
+++ evlog-1.6.1/user/lib/test/evl_log_write.mips.out
@@ -0,0 +1,60 @@
+size=66
+00000000 00 00 00 0A 00 00 00 0A  00 00 00 01 00 00 00 02
+00000010 00 00 00 03 00 00 00 04  00 00 00 05 00 0A 00 0B
+00000020 6C 6F 76 65 00 00 00 00  14 00 00 00 01 00 00 00
+00000030 02 00 00 00 03 00 00 00  04 00 00 00 05 F0 F0 F0
+00000040 F0 63
+size=81
+00000000 00 09 00 00 00 00 00 00  00 38 00 00 00 00 00 00
+00000010 00 38 00 00 00 0A 00 00  00 00 00 00 00 0A 00 00
+00000020 00 00 00 00 00 0B 00 00  00 00 00 00 00 0C 70 65
+00000030 61 63 65 00 00 00 00 14  00 00 00 01 00 00 00 02
+00000040 00 00 00 03 00 00 00 04  00 00 00 05 F0 F0 F0 F0
+00000050 63
+size=86
+00000000 00 00 00 00 00 00 00 0A  00 00 00 00 00 00 00 0B
+00000010 00 00 00 00 00 00 00 0C  00 00 00 00 00 00 00 0D
+00000020 00 00 00 00 00 00 00 0E  00 00 00 00 00 00 00 14
+00000030 00 00 00 00 00 00 00 15  00 00 00 00 00 00 00 16
+00000040 00 00 00 00 00 00 00 17  00 00 00 00 00 00 00 18
+00000050 6C 69 6E 75 78 00
+size=20
+00000000 00 00 00 01 00 00 00 02  00 00 00 03 00 00 00 04
+00000010 00 00 00 05
+size=56
+00000000 00 01 00 02 00 00 04 57  00 00 08 AE 00 00 00 00
+00000010 00 00 00 0A 00 00 00 00  00 00 00 0A 3D FB E7 6D
+00000020 40 23 FF 7C ED 91 68 73  3F FF C4 86 70 C7 E9 38
+00000030 40 00 00 00 00 00 00 00
+size=18
+00000000 41 42 40 01 64 D9 36 47  64 C3 80 00 00 00 00 00
+00000010 00 00
+size=84
+00000000 00 00 00 00 00 00 00 0A  00 00 00 00 00 00 00 0B
+00000010 00 00 00 00 00 00 00 0C  00 00 00 00 00 00 00 0D
+00000020 00 00 00 00 00 00 00 0E  00 00 00 00 00 00 00 14
+00000030 00 00 00 00 00 00 00 15  00 00 00 00 00 00 00 16
+00000040 00 00 00 00 00 00 00 17  00 00 00 00 00 00 00 18
+00000050 00 00 00 0A
+size=100
+00000000 00 00 00 01 00 00 00 02  00 00 00 03 00 00 00 04
+00000010 00 00 00 05 00 00 00 01  00 00 00 02 00 00 00 03
+00000020 00 00 00 04 00 00 00 05  00 01 00 02 00 03 00 04
+00000030 00 05 00 01 00 02 00 03  00 04 00 05 6C 6F 76 65
+00000040 FF 10 FE 20 70 65 61 63  65 00 00 00 00 1E 00 00
+00000050 00 1F 00 00 00 20 00 00  00 21 00 00 00 22 6C 69
+00000060 6E 75 78 00
+size=104
+00000000 00 00 00 0A 00 00 00 0B  00 00 00 0C 00 00 00 0D
+00000010 00 00 00 0E 00 00 00 0F  00 00 00 00 00 00 00 0A
+00000020 00 00 00 00 00 00 00 0B  40 00 2A AA 8E B4 63 49
+00000030 80 00 00 00 00 00 00 00  40 00 AA AA A7 DE D6 BA
+00000040 90 00 00 00 00 00 00 00  3F FF C4 86 70 C7 E9 38
+00000050 40 00 00 00 00 00 00 00  40 01 64 D9 36 47 64 C3
+00000060 80 00 00 00 00 00 00 00
+size=32
+00000000 FE ED F0 0D FA CE F0 0D  00 00 00 00 00 00 00 01
+00000010 00 00 00 02 FE ED F0 0D  FA CE F0 0D FE ED FA CE
+size=21
+00000000 70 65 61 63 65 00 6C 6F  76 65 00 61 6E 64 00 6C
+00000010 69 6E 75 78 00
Index: evlog-1.6.1/user/lib/test/Makefile.am
===================================================================
--- evlog-1.6.1.orig/user/lib/test/Makefile.am
+++ evlog-1.6.1/user/lib/test/Makefile.am
@@ -40,6 +40,7 @@ testoutputfiles := evl_log_write.out \
 	      evl_log_write.s390x.out \
 	      evl_log_write.ia64.out \
 	      evl_log_write.x86_64.out \
+	      evl_log_write.mips.out \
 	      evl_log_write2.out \
 	      aligntest.out \
 	      aostest.out \
@@ -47,6 +48,7 @@ testoutputfiles := evl_log_write.out \
 	      defaultTest.out \
 	      defaultTest.ia64.out \
 	      defaultTest.x86_64.out \
+	      defaultTest.mips.out \
 	      defaultTest.ppc.out \
 	      defaultTest.s390.out \
 	      defaultTest.s390x.out \
