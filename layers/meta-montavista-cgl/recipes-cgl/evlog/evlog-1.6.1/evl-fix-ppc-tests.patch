Index: evlog-1.6.1/user/lib/test/evl_log_write.ppc.out
===================================================================
--- evlog-1.6.1.orig/user/lib/test/evl_log_write.ppc.out
+++ evlog-1.6.1/user/lib/test/evl_log_write.ppc.out
@@ -21,12 +21,14 @@ size=86
 size=20
 00000000 00 00 00 01 00 00 00 02  00 00 00 03 00 00 00 04
 00000010 00 00 00 05
-size=48
+size=56
 00000000 00 01 00 02 00 00 04 57  00 00 08 AE 00 00 00 00
 00000010 00 00 00 0A 00 00 00 00  00 00 00 0A 3D FB E7 6D
 00000020 40 23 FF 7C ED 91 68 73  3F FC 48 67 0C 7E 93 84
-size=10
-00000000 41 42 40 16 4D 93 64 76  4C 38
+00000030 00 00 00 00 00 00 00 00
+size=18
+00000000 41 42 40 16 4D 93 64 76  4C 38 00 00 00 00 00 00
+00000010 00 00
 size=84
 00000000 00 00 00 00 00 00 00 0A  00 00 00 00 00 00 00 0B
 00000010 00 00 00 00 00 00 00 0C  00 00 00 00 00 00 00 0D
@@ -42,12 +44,14 @@ size=100
 00000040 FF 10 FE 20 70 65 61 63  65 00 00 00 00 1E 00 00
 00000050 00 1F 00 00 00 20 00 00  00 21 00 00 00 22 6C 69
 00000060 6E 75 78 00
-size=72
+size=104
 00000000 00 00 00 0A 00 00 00 0B  00 00 00 0C 00 00 00 0D
 00000010 00 00 00 0E 00 00 00 0F  00 00 00 00 00 00 00 0A
 00000020 00 00 00 00 00 00 00 0B  40 02 AA A8 EB 46 34 98
-00000030 40 0A AA AA 7D ED 6B A9  3F FC 48 67 0C 7E 93 84
-00000040 40 16 4D 93 64 76 4C 38
+00000030 00 00 00 00 00 00 00 00  40 0A AA AA 7D ED 6B A9
+00000040 00 00 00 00 00 00 00 00  3F FC 48 67 0C 7E 93 84
+00000050 00 00 00 00 00 00 00 00  40 16 4D 93 64 76 4C 38
+00000060 00 00 00 00 00 00 00 00
 size=32
 00000000 FE ED F0 0D FA CE F0 0D  00 00 00 00 00 00 00 01
 00000010 00 00 00 02 FE ED F0 0D  FA CE F0 0D FE ED FA CE
Index: evlog-1.6.1/user/lib/template/convert.c
===================================================================
--- evlog-1.6.1.orig/user/lib/template/convert.c
+++ evlog-1.6.1/user/lib/template/convert.c
@@ -124,14 +124,15 @@ byteswap(void *data, int nbytes)
 		d[j] = tmp;
 	}
 }
+
 /*
- * This function converts 10-byte (12-byte, or 16-btye on IA64)
- * long double IEEE754 extended precision (15 bit exponent) from a Intel
- * machine to a 8-byte double (11-bit exponent) for a non-Intel architecture. 
- *  
+ * This function converts 10-byte (12-byte, or 16-btye on IA64) long
+ * double IEEE754 extended precision (15 bit exponent) from a Intel
+ * machine to an 8-byte big-endian double (11-bit exponent) for a
+ * non-Intel architecture.
  */ 
 static double 
-intel_ldouble2ppc_double(unsigned int arr[])
+intel_ldouble_2_8bytebe_ldouble(unsigned int arr[])
 {
 	unsigned int dbl[2];
 	unsigned int exp;
@@ -169,26 +170,43 @@ intel_ldouble2ppc_double(unsigned int ar
 }
 
 /*
- * Convert long double intel -> ppc
+ * Convert long double intel -> big-endian 8 byte
  */
 static void
-conv_ia2ppc_ldouble(void * data)
+conv_ia2be8byte_ldouble(void * data)
 {
 	unsigned int array[3];
 	/* A long double on Intel is 12 bytes */
 	/* only ten bytes is significant      */
 	memcpy(array, data, 3 * sizeof(int));
 	/* Intel record data to IBM local */
-	*(long double *) data  = (long double) intel_ldouble2ppc_double(array);
+	*(long double *) data = intel_ldouble_2_8bytebe_ldouble(array);
+}
+
+/*
+ * Convert long double intel -> big-endian 16 byte
+ */
+static void
+conv_ia2be16byte_ldouble(void * data, size_t src_size)
+{
+	unsigned int array[4];
+	/* A long double on Intel is 12 bytes */
+	/* only ten bytes is significant except */
+	/* ia64 where 16 bytes is significant. */
+	memset(array, 0, sizeof(array));
+	memcpy(array, data, src_size);
+	byteswap(array, sizeof(array));
+	/* Intel record data to IBM local */
+	*(long double *) data = *((long double *) array);
 }
 
 /*
- * Convert long double ppc -> intel
+ * Convert 8 byte big-endian long double -> intel
  */
 static void
-conv_ppc2ia_ldouble(void *data)
+conv_be8byte2ia_ldouble(void *data)
 {
-	/* long double on PPC is only 8 bytes  */
+	/* long double source is 8 bytes  */
 	double d = *(double  *) data;
 	/* IBM record data to Intel local */
 	byteswap(&d, sizeof(d));
@@ -196,23 +214,43 @@ conv_ppc2ia_ldouble(void *data)
 }
 
 /*
+ * Convert 16 byte big-endian long double -> intel
+ */
+static void
+conv_be16byte2ia_ldouble(void *data)
+{
+	/* long double source is 8 bytes  */
+	long double d = *(long double  *) data;
+	/* IBM record data to Intel local */
+	byteswap(&d, sizeof(d));
+	*(long double *) data = d;
+}
+
+/*
  * This function performs the long double conversion from Intel->IBM or 
  * IBM->Intel.
  */
 static void
 conv_swap_ldouble(int log_arch, void *data)
 {
+	size_t ssize = _evlTmplArchTypeInfo[log_arch][TY_LDOUBLE].ti_size;
+	size_t dsize = _evlTmplArchTypeInfo[COMPILED_ARCH][TY_LDOUBLE].ti_size;
+
 	if (log_arch == LOGREC_ARCH_I386 ||
 	    log_arch == LOGREC_ARCH_IA64 ||
 	    log_arch == LOGREC_ARCH_IA64 ||
 	    log_arch == LOGREC_ARCH_ARM_LE) {
-		conv_ia2ppc_ldouble(data);
-	} else if (log_arch == LOGREC_ARCH_PPC ||
-		   log_arch == LOGREC_ARCH_PPC64 ||
-		   log_arch == LOGREC_ARCH_S390 ||
+		if (dsize == 16)
+			conv_ia2be16byte_ldouble(data, ssize);
+		else
+			conv_ia2be8byte_ldouble(data);
+	} else if (log_arch == LOGREC_ARCH_S390 ||
 		   log_arch == LOGREC_ARCH_S390X ||
 		   log_arch == LOGREC_ARCH_ARM_BE) {
-		conv_ppc2ia_ldouble(data);
+			conv_be8byte2ia_ldouble(data);
+	} else if (log_arch == LOGREC_ARCH_PPC ||
+		   log_arch == LOGREC_ARCH_PPC64) {
+			conv_be16byte2ia_ldouble(data);
 	}
 
 }
Index: evlog-1.6.1/user/lib/template/template.c
===================================================================
--- evlog-1.6.1.orig/user/lib/template/template.c
+++ evlog-1.6.1/user/lib/template/template.c
@@ -261,7 +261,7 @@ tmpl_arch_type_info_t _evlTmplArchTypeIn
 	{8, 8},
 	{4, 4},
 	{8,	8},
-	{8, 8},
+	{16, 16},
 	{4, 0},
 	{4, 4},
 	{4, 0},
@@ -288,7 +288,7 @@ tmpl_arch_type_info_t _evlTmplArchTypeIn
 	{8, 8},
 	{4, 4},
 	{8,	8},
-	{8, 8},
+	{16, 16},
 	{8, 0},
 	{4, 4},
 	{8, 0}, 
